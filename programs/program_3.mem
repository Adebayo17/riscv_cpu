// =======================================
// program_3.mem â€“ Loop & Additional ALU Tests
// =======================================

// Initialize registers
00100093  // ADDI x1, x0, 1   -> x1 = 1
00200113  // ADDI x2, x0, 2   -> x2 = 2
00A00193  // ADDI x3, x0, 10  -> x3 = 10  (loop counter)
00000213  // ADDI x4, x0, 0   -> x4 = 0   (sum result)

// Loop: Compute sum from 1 to 10
// =======================================

00B20233  // ADD x4, x4, x3   -> x4 = x4 + x3
FFF18193  // ADDI x3, x3, -1  -> x3 = x3 - 1 (decrement counter)
FE031CE3  // BNE x3, x0, -8   -> If x3 != 0, loop back (PC -= 8)

// =======================================
// Additional ALU Instructions (Shifts, Multiplication, Division)
// =======================================

// Left Shift
002092B3  // SLL x5, x1, x2   -> x5 = x1 << x2  (1 << 2 = 4)

// Right Shift Logical
0020D333  // SRL x6, x1, x2   -> x6 = x1 >> x2  (1 >> 2 = 0)

// Right Shift Arithmetic
4020D3B3  // SRA x7, x1, x2   -> x7 = x1 >> x2 (Arithmetic)

// Memory Operations
00612223  // SW x6, 4(x2)     -> Store x6 at Mem[x2+4]
00412183  // LW x3, 4(x2)     -> Load Mem[x2+4] into x3

// =======================================
// End of Program
// =======================================

00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)
00000000  // NOP (Padding)